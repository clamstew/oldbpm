=== Types ===

upgrades - general, wizard element stuff, blacksmith weapon stuff
perks

abilities - separate; upgrades and perks should integrate these.


=== Upgrades ===
    Some examples of how easy it should be to make a new upgrade:
        fireBallUpgrade:
            enableFireBalls: true,
            damage: 50%

        fireLonger:
             fireLengthReduction: 25%


=== Abilities - Should be useable by upgrade, perks, or anything that needs them: ===

    enableFireBalls - boolean: If this upgrade is set then it will enable the fireball power
        name
        description

    bulletDamage - percentage: If set above 0 then it will add it to a list to allow stacking
        name
        description

        // Should be able to support things like:
            Super Damage Upgrade:
                bulletDamage: 20%
            Another Damage Upgrade
                bulletDamage: 30%

            overall bullet damage 50%

    multiplierGivesDamage - percentage: If above 0 then multiplier will affect damage by that amount. Does not stack like bulletDamage.
        name
        description


    An upgrade instance should detect if it already has an ability. If it does and you specify it again then that should override rather than stack. This would allow for a layout like:

        Super Damage Upgrade:
            tier0:
                bulletDamage: 10%
            tier1:
                bulletDamage: 20%
            tier2:
                bulletDamage: 50%

        If we didn't implement it then bulletDamage would stack into 80% if you unlocked all upgrades.


=== Retrieving upgrade values could be done like so: ===
    -S: I think we should have upgrades be a function. We could then get upgrades like this:
        var overallBulletDamage = upgrades('bulletDamage');

    // This would tally all of the bulletDamages then give you a value which could be worked with e.g. if (20, 30) then (50 or 1.5)
    var overallBulletDamage = upgrades.getVal('bulletDamage');
    thisBullet.damage = overallBulletDamage;

    // For more flexible upgrades
    var doSomethingWeird = upgrades.getVal('doSomethingWeird'); // would return true/false for this particular ability. Some could also return object literals containing useful info.
    if (doSomethingWeird) {
        // Do a bunch of weird things
    }


=== Some psuedo examples ===

  === Creating a general upgrade. ===

    // Here you specify each upgrade value for every level.
    createGeneralUpgrade({
        name: 'Upgrade Town Defense',
        levels: [
            { // First upgrade increase town defense by 10% or whatever. It will cost $200
                townDefense: 10,
                cost: 200,
            },

            { // Second upgrade increase town defense by 20% or whatever. It will cost $300
                townDefense: 20,
                cost: 300,
            },
        ],
    });

    // Not sure if this should be used since it would make balancing upgrades harder.
    createGeneralUpgrade({
        name: 'Upgrade Town Defense',

        // The first upgrade
        initial: {
            townDefense: 5,
            cost: 200,
        },

        // Subsequent upgrades
        sequence: {
            townDefense: 10, // OR "25%" This will increase the value by 10 for the rest of the upgrades if a percent string is specified then it will increase it by that percentage.
            cost: 300, // Next upgrade will cost an additional 300, can also specify percent string
        },

        // You should also be able to override a sequence at a specific level. So for instance say you wanted a much bigger increase for the last upgrade. You should be able to have the regular sequence but then for the fifth tier it should work with the overriden value.
        levels: {
            5: {
                townDefense: 200000,
                cost: 300000000,
            },
        },
    });

  === Creating a perk ===
    This should be pretty similar to general upgrades except that they cannot be upgraded. It is a one time thing. If we change our minds on that then they should function almost exactly like general upgrades.

    createPerk({
        name: 'Bullet Resistance',
        initial: {
            bulletsBounceOffArmor: true,
        },
    });

  === Creating a weapon or element upgrade ===
    These should be similar to regular upgrades except that they some use prerequisites.

    createWeaponUpgrade({
        name: 'Mega Pins',
        id: 'w04', // Probably can be automated but probably not necessary since there's only going to be like 5. Only needed if required by another upgrade.
        requires: [9, 'w00', 'w01'], // Requires 9 points spent and the first two weapon upgrades.
        initial: {
            pinDamage: 20%,
            superPins: true,
        },
        sequence: {
            pinDamage: 10%,
        },
    });
