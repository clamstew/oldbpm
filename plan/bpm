/*
    bpm.js
        holds main game logic

        don't think we need a States file, since all logic is basically stored in the states.

*/

define(['objects', 'utils'], function(objects) {

    var currentState;

    function State(context)
        // context = what to draw to: webgl, canvas, or html
        objects[]
            // array of _gameObjects
        objectsToAdd[]
            // objects to add on next frame
        objectsToRemove[]
            // objects to remove on next frame

        init()
            currentState = this

        update()
            for each object in objectsToAdd
                add object to context
            for each object in objectsToRemove
                remove object from context

        render()
            for each object in objects
                render object

        add()
            add object to objectsToAdd

        remove()
            add object to objectsToRemove

    Menu.prototype = new State();
    function Menu(init, update)
        // Accept callbacks for different menus
        // use to setup buttons, etc. and define custom behavior in update
        this.init = init || Menu.prototype.init;
            // either this way OR below, depending on needs
        this.init = function()
            Menu.prototype.init();
            // custom init code
            if (isFunction(init))
                init();

        // same as above for update
        this.update = update || Menu.prototype.update;

    // Then we can make menus like so
    var mainMenu = new Menu(function init() {}, function update() {});

    return {
        currentState: currentState
    }

var currentState;

function _state(context)
    // context = what to draw to: webgl, canvas, or html
    objects[]
        // array of _gameObjects
    objectsToAdd[]
        // objects to add on next frame
    objectsToRemove[]
        // objects to remove on next frame

    init()
        currentState = this

    update()
        for each object in objectsToAdd
            add object to context
        for each object in objectsToRemove
            remove object from context

    add()
        add object to objectsToAdd

    remove()
        add object to objectsToRemove

function _menu()
    // not sure if necessary

mixin(MainMenu, _state, _menu)
function MainMenu()
    init()
        MainMenu.prototype.init()
        // make buttons n stuff
